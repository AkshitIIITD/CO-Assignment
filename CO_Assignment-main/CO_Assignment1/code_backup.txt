# -*- codin: utf-8 -*-
"""
Created on Sun Feb 28 12:05:10 2021
@author: Shrugal Tayal 2020408
"""
#C:\Users\Shrugal Tayal\OneDrive\Documents\Shrugal\Practise\PYTHON

print("Assembler")
#__functions__:
def addn(x,flag,rega):
    # type A
    flag[0]=0
    sum=rega[x[2]][1]+rega[x[3]][1]
    if sum > 255:
        flag[0]=1
        return 'Error: overflow detected'
    else:
        s = opcode[x[0]]+'0'*2+rega[x[1]][0]+rega[x[2]][0]+rega[x[3]][0]
        rega[x[1]][1]=sum
        b = str(bin(sum))
        slice = b.index('b')
        b = b[slice+1:]
        b = '0'*(16-len(b))+b
        rega[x[1]][2]=b
        return s

def subt(x,flag,rega):
    # type A
    flag[0]=0
    dif=rega[x[2]][1]-rega[x[3]][1]
    if dif < 0:
        flag[0]=1
        rega[x[1]][1]=0
        return 'Error: overflow detected'
    else:
        s = opcode[x[0]]+'0'*2+rega[x[1]][0]+rega[x[2]][0]+rega[x[3]][0]
        rega[x[1]][1]=dif
        b = str(bin(dif))
        slice = b.index('b')
        b = b[slice+1:]
        b = '0'*(16-len(b))+b
        rega[x[1]][2]=b
        return s

def move(x,flag,rega):
    if '$' in x[2]: # type B
        a = int(x[2][1:])
        rega[x[1]][1]=a
        b = str(bin(a))    
        slice = b.index('b')
        b = b[slice+1:]
        a = '0'*(16-len(b))+b
        rega[x[1]][2]=a
        b = '0'*(8-len(b))+b
        s = opcode[x[0]][0]+rega[x[1]][0]+b
        return s
    else:   # type C
        s = opcode[x[0]][1]+'0'*5+rega[x[1]][0]+rega[x[2]][0]
        rega[x[1]][1]=rega[x[2]][1]
        rega[x[1]][2]=rega[x[2]][2]
        return s
    
def load(x,flag,rega):
    pass
def stor(x,flag,rega):
    pass

def mult(x,flag,rega):
    # type A
    flag[0]=0
    pro=rega[x[2]][1]*rega[x[3]][1]
    if pro > 255:
        flag[0]=1
        return 'Error: overflow detected'
    else:
        s = opcode[x[0]]+'0'*2+rega[x[1]][0]+rega[x[2]][0]+rega[x[3]][0]
        rega[x[1]][1]=pro
        b = str(bin(pro))
        slice = b.index('b')
        b = b[slice+1:]
        b = '0'*(16-len(b))+b
        rega[x[1]][2]=b
        return s 

def divn(x,flag,rega):
    # type C
    if rega[x[2]][1]!=0:
        q=int(rega[x[1]][1]//rega[x[2]][1])
        r=int(rega[x[1]][1]%rega[x[2]][1])
        rega['R1'][1]=r
        b = str(bin(r))
        slice = b.index('b')
        b = b[slice+1:]
        b = '0'*(16-len(b))+b
        rega['R1'][2]=b
        rega['R0'][1]=q
        b = str(bin(q))
        slice = b.index('b')
        b = b[slice+1:]
        b = '0'*(16-len(b))+b
        rega['R0'][2]=b
    s = opcode[x[0]]+'0'*5+rega[x[1]][0]+rega[x[2]][0]
    return s 

def right(x,flag,rega):
    # type B
    m = rega[x[1]][1]
    n = int(x[2][1:])
    a = m>>n
    if a<1:
        return 'Error: overflow detected'
    else:
        rega[x[1]][1]=a
        b=str(bin(a))
        slice = b.index('b')
        b = b[slice+1:]
        a = '0'*(16-len(b))+b
        rega[x[1]][2]=a
        b = '0'*(8-len(b))+b
        s = opcode[x[0]]+rega[x[1]][0]+b
        return s
    
def left(x,flag,rega):
    # type B
    m = rega[x[1]][1]
    n = int(x[2][1:])
    a = m<<n
    if a>255:
        return 'Error: overflow detected'
    else:
        rega[x[1]][1]=a
        b=str(bin(a))
        slice = b.index('b')
        b = b[slice+1:]
        a = '0'*(16-len(b))+b
        rega[x[1]][2]=a
        b = '0'*(8-len(b))+b
        s = opcode[x[0]]+rega[x[1]][0]+b
        return s

def exor(x,flag,rega):
    # type A
    m = rega[x[2]][1]
    n = rega[x[3]][1]
    a = m^n     # cross check
    rega[x[1]][1] = a
    b = str(bin(a))
    slice = b.index('b')
    b = b[slice+1:]
    b = '0'*(16-len(b))+b
    rega[x[1]][2]=b
    s = opcode[x[0]]+'0'*2+rega[x[1]][0]+rega[x[2]][0]+rega[x[3]][0]
    return s

def Or(x,flag,rega):
    # type A
    m = rega[x[2]][1]
    n = rega[x[3]][1]
    a = m|n     # cross check
    rega[x[1]][1] = a
    b = str(bin(a))
    slice = b.index('b')
    b = b[slice+1:]
    b = '0'*(16-len(b))+b
    rega[x[1]][2]=b
    s = opcode[x[0]]+'0'*2+rega[x[1]][0]+rega[x[2]][0]+rega[x[3]][0]
    return s

def And(x,flag,rega):
    # type A
    m = rega[x[2]][1]
    n = rega[x[3]][1]
    a = m&n     # cross check
    rega[x[1]][1] = a
    b = str(bin(a))
    slice = b.index('b')
    b = b[slice+1:]
    b = '0'*(16-len(b))+b
    rega[x[1]][2]=b
    s = opcode[x[0]]+'0'*2+rega[x[1]][0]+rega[x[2]][0]+rega[x[3]][0]
    return s

def inv(x,flag,rega):
    # type C
    m = rega[x[2]][1]
    a = ~m     # cross check
    rega[x[1]][1] = a
    b = str(bin(a))
    slice = b.index('b')
    b = b[slice+1:]
    b = '0'*(16-len(b))+b
    rega[x[1]][2]=b
    s = opcode[x[0]]+'0'*5+rega[x[1]][0]+rega[x[2]][0]
    return s

# __main__:
if __name__ == "__main__" :
    print('start')
     # To be updated later
    code = '''add R1 R2 R3
sub R2 R3 R4
mov R2 $5
mov R3 R2
ld reg1 mem_addr
st reg1 mem_addr
mul R4 R3 R2
div R4 R2
rs R2 $2
ls R2 $3
xor R0 R4 R2
or R1 R4 R2
and R5 R4 R2
not R6 R2
cmp reg1 reg2
jmp mem_addr
jlt mem_addr
jgt mem_addr
je mem_addr
hlt'''
    code = code.split('\n')
    inst = []
    for i in code:
        inst.append(i.split())
        
    bincode = []    # stores the assembled code
    # predefined
    opcode = {'add':'00000','sub':'00001','mov':('00010','00011'),'ld':'00100','st':'00101',
              'mul':'00110','div':'00111','rs':'01000','ls':'01001','xor':'01010','or':'01011',
              'and':'01100','not':'01101'}
    
    flag = [0,0,0,0]   # V, L, G, E 
    rega = {'R0':['000',0,''],'R1':['001',0,''],'R2':['010',0,''],'R3':['011',0,''],
             'R4':['100',0,''],'R5':['101',0,''],'R6':['110',0,''],'FLAGS':['111',flag]}
    # Registers will have values as integers
    
    var = []
    val = []
    
    for i in range(len(inst)):
        if inst[i][0] in opcode:
            if inst[i][0] == 'add':
                bincode.append(addn(inst[i],flag,rega))
            if inst[i][0] == 'sub':
                bincode.append(subt(inst[i],flag,rega))
            if inst[i][0] == 'mov':
               bincode.append(move(inst[i],flag,rega))
            if inst[i][0] == 'ld':  # incomplete
               bincode.append(load(inst[i],flag,rega))
            if inst[i][0] == 'st':  # incomplete
               bincode.append(stor(inst[i],flag,rega))
            if inst[i][0] == 'mul':
               bincode.append(mult(inst[i],flag,rega))
            if inst[i][0] == 'div':
               bincode.append(divn(inst[i],flag,rega))
            if inst[i][0] == 'rs':
               bincode.append(right(inst[i],flag,rega))
            if inst[i][0] == 'ls':
               bincode.append(left(inst[i],flag,rega))
            if inst[i][0] == 'xor':
               bincode.append(exor(inst[i],flag,rega))
            if inst[i][0] == 'or':
               bincode.append(Or(inst[i],flag,rega))
            if inst[i][0] == 'and':
               bincode.append(And(inst[i],flag,rega))
            if inst[i][0] == 'not': # To be checked
               bincode.append(inv(inst[i],flag,rega))

print(rega)
print(bincode)
print(flag)
#for i in bincode:
#    print(len(i))